{"version":3,"sources":["components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","components/minter/Cover.js","utils/minter.js","components/minter/nft/Add.js","components/minter/nft/Card.js","components/ui/Loader.js","components/minter/nft/index.js","hooks/useMinterCertContract.js","hooks/useContract.js","App.js","hooks/useBalance.js","reportWebVitals.js","index.js"],"names":["Notification","_jsx","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","_ref","text","_jsxs","children","className","NotificationError","_ref2","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","_objectWithoutProperties","_excluded","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","_objectSpread","style","width","concat","height","Wallet","amount","symbol","destroy","_Fragment","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","onClick","Cover","name","connect","background","minHeight","Button","catch","e","console","log","prototype","PropTypes","string","client","Web3Storage","token","process","formatName","encodeURI","converObjectToFile","data","blob","Blob","JSON","stringify","type","File","createCertificates","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","minterContract","performActions","description","ipfsImage","ownerAddress","attributes","wrap","_context2","prev","next","_ref3","_callee","kit","defaultAccount","fileName","files","cid","url","_context","abrupt","image","owner","put","sent","methods","safeMint","send","from","t0","stop","_x4","apply","arguments","_x","_x2","_x3","uploadFileToWebStorage","_ref4","_callee3","file","imageName","_context3","_x5","getCertificates","_ref5","_callee5","certificates","certificatesLength","_loop","i","_context6","totalSupply","call","certificate","_context5","Promise","_ref6","_callee4","resolve","res","meta","_context4","tokenURI","fetchCertificateMeta","fetchCertificateOwner","index","_x7","push","Number","delegateYield","all","t1","_x6","_ref7","_callee6","ipfsUrl","_context7","axios","get","_x8","_ref8","_callee7","_context8","ownerOf","_x9","_x10","fetchCertificateContractOwner","_ref9","_callee8","_context9","_x11","AddCertificates","save","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setIpfsImage","_useState5","_useState6","setDescription","_useState7","_useState8","setAttribute","_useState9","_useState10","show","setShow","handleClose","setAttributeFunc","trait_type","value","attributeObject","arr","findIndex","el","oldArray","_toConsumableArray","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","placeholder","onChange","imageURL","alert","Label","Footer","disabled","CertificatesCard","Col","Card","Badge","bg","src","alt","objectFit","Text","Row","map","attribute","key","instanceOf","Object","isRequired","Loader","role","CertificatesList","_useContractKit","useContractKit","setCertificates","loading","setLoading","certificateOwner","setcertificateOwner","getAssets","useCallback","allCertificates","error","finish","addCertificate","toast","fetchContractOwner","_address","xs","sm","lg","_certificate","Certificate","updataBalance","func","useMinterCertContract","abi","contractAddress","getConnectedKit","contract","setContract","getContract","web3","eth","Contract","useContract","MyCertificatesAbi","MyCertificatesContractAddress","MyNFT","App","_useBalance","balance","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","Nav","CELO","Certificates","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","ContractKitProvider","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.effe72ae.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nconst Notification = () => (\r\n  <ToastContainer\r\n    position=\"bottom-center\"\r\n    autoClose={5000}\r\n    hideProgressBar\r\n    newestOnTop\r\n    closeOnClick\r\n    rtl={false}\r\n    pauseOnFocusLoss\r\n    draggable={false}\r\n    pauseOnHover\r\n  />\r\n);\r\n\r\nconst NotificationSuccess = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst Props = {\r\n  text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n  text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };\r\n","import {ERC20_DECIMALS} from \"./constants\";\r\n\r\n// format a wallet address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\r\n}\r\n\r\n// convert from big number\r\nexport const formatBigNumber = (num) => {\r\n    if (!num) return\r\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\r\n}","const ERC20_DECIMALS = 18;\r\nexport { ERC20_DECIMALS };\r\n","import { useEffect, useRef } from \"react\";\r\nimport Jazzicon from \"@metamask/jazzicon\";\r\n\r\nexport default function Identicon({ address, size, ...rest }) {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    if (address && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(\r\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\r\n      );\r\n    }\r\n  }, [address, size]);\r\n\r\n  return (\r\n    <div {...rest}>\r\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\r\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\r\nimport Identicon from \"./ui/Identicon\";\r\n\r\nconst Wallet = ({ address, amount, symbol, destroy }) => {\r\n  if (address) {\r\n    return (\r\n      <>\r\n        <Dropdown>\r\n          <Dropdown.Toggle\r\n            variant=\"light\"\r\n            align=\"end\"\r\n            id=\"dropdown-basic\"\r\n            className=\"d-flex align-items-center border rounded-pill py-1\"\r\n          >\r\n            {amount ? (\r\n              <>\r\n                {formatBigNumber(amount)}{\" \"}\r\n                <span className=\"ms-1\"> {symbol}</span>\r\n              </>\r\n            ) : (\r\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\r\n            )}\r\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu className=\"shadow-lg border-0\">\r\n            <Dropdown.Item\r\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\r\n              target=\"_blank\"\r\n            >\r\n              <Stack direction=\"horizontal\" gap={2}>\r\n                <i className=\"bi bi-person-circle fs-4\" />\r\n                <span className=\"font-monospace\">\r\n                  {truncateAddress(address)}\r\n                </span>\r\n              </Stack>\r\n            </Dropdown.Item>\r\n            <Dropdown.Divider />\r\n            <Dropdown.Item\r\n              as=\"button\"\r\n              className=\"d-flex align-items-center\"\r\n              onClick={() => {\r\n                destroy();\r\n              }}\r\n            >\r\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\r\n              Disconnect\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Wallet;\r\n","import { Button } from \"react-bootstrap\";\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Cover = ({ name, connect }) => {\r\n  if (name) {\r\n    return (\r\n      <div>\r\n          <div className=\"d-flex justify-content-center flex-column text-center\" style={{ background: '#000', minHeight: \"100vh\"}}>\r\n            {/* <div className=\"mt-auto text-light mb-5\" style={{ maxWidth: \"320px\" }}>\r\n              <img src={coverImg} alt=\"\" />\r\n            </div> */}\r\n            <h1>{name}</h1>\r\n            <p>Please connect your wallet to continue</p>\r\n            <Button className=\"rounded-pill px-3 mt-3\" onClick={() => connect().catch((e) => console.log(e))} variant=\"outline-light\">Connect Wallet</Button>\r\n        </div>\r\n        <p className=\"mt-auto text-secondary\">Powered By Celo</p>\r\n      </div>\r\n    )\r\n  }\r\n  return null;\r\n};\r\n\r\nCover.prototype = {\r\n  name: PropTypes.string,\r\n};\r\n\r\nCover.defaultProps = {\r\n  name: \"\",\r\n}\r\n\r\n\r\nexport default Cover;\r\n","// Import axios library for making HTTP requests\r\nimport axios from 'axios'\r\n\r\n// Import Web3Storage from bundle.esm.min.js\r\nimport { Web3Storage } from 'web3.storage/dist/bundle.esm.min.js';\r\n\r\n\r\n// Create a new Web3Storage client instance\r\nconst client = new Web3Storage({\r\n    token: process.env.REACT_APP_STORAGE_API_KEY\r\n});\r\n\r\n\r\n// Format a name by replacing spaces with %20\r\nconst formatName = (name) => {\r\n    // replace all spaces with %20\r\n    return encodeURI(name)\r\n\r\n}\r\n\r\n\r\n// Convert an object to a file for uploading\r\nconst converObjectToFile = (data) => {\r\n    const blob = new Blob([JSON.stringify(data)], {type: \"application/json\"})\r\n    const files = [new File([blob], `${data.name}.json`)];\r\n    return files;\r\n}\r\n\r\n\r\n// Function to create certificates\r\nexport const createCertificates = async (\r\n    minterContract, \r\n    performActions,\r\n    {name, description, ipfsImage, ownerAddress, attributes}\r\n) => {\r\n    await performActions(async (kit) => {\r\n        if (!name || !description || !ipfsImage) return;\r\n        const { defaultAccount } = kit\r\n\r\n        const data = {\r\n            name,\r\n            description,\r\n            image: ipfsImage,\r\n            owner: defaultAccount,\r\n            attributes,\r\n        }\r\n\r\n        try {\r\n            // trim any extra whitespace from the name and\r\n            // replace the whitespace btwn the name with %20\r\n            const fileName = formatName(name)\r\n\r\n            // bundle certificate metadata into a file\r\n            const files = converObjectToFile(data)\r\n\r\n            // save certificate metadata into a file\r\n            const cid = await client.put(files);\r\n\r\n            // IPFS url for upload metadata\r\n            const url = `https://${cid}.ipfs.w3s.link/${fileName}.json`;\r\n\r\n            // mint certificate and save th url to the blockchain\r\n            return await minterContract.methods.safeMint(ownerAddress, url).send({from: defaultAccount});\r\n\r\n        } catch (error) {\r\n            console.log(\"Error uploading file: \", error)\r\n        }\r\n    })\r\n}\r\n\r\n\r\n// Function to upload a file to Web3Storage\r\nexport const uploadFileToWebStorage = async (e) => {\r\n\r\n    // Initialize the Web3Storage client with an API key\r\n    const client = new Web3Storage({token: process.env.REACT_APP_STORAGE_API_KEY})\r\n    const files = e.target.files;\r\n    const file = files[0];\r\n\r\n    const fileName = file.name;\r\n    const imageName = formatName(fileName)\r\n\r\n    const cid = await client.put(files);\r\n    return `https://${cid}.ipfs.w3s.link/${imageName}`\r\n\r\n}\r\n\r\n\r\n// Function to fetch all certificates\r\nexport const getCertificates = async (minterContract) => {\r\n    try {\r\n        const certificates = []\r\n\r\n        const certificatesLength = await minterContract.methods.totalSupply().call();\r\n        for (let i = 0; i < Number(certificatesLength); i++) {\r\n            const certificate = new Promise(async (resolve) => {\r\n                const res = await minterContract.methods.tokenURI(i).call();\r\n                const meta = await fetchCertificateMeta(res);\r\n                const owner = await fetchCertificateOwner(minterContract, i);\r\n                resolve({\r\n                    index: i,\r\n                    owner,\r\n                    name: meta.data.name,\r\n                    image: meta.data.image,\r\n                    description: meta.data.description,\r\n                    attributes: meta.data.attributes,\r\n                })\r\n            });\r\n            certificates.push(certificate)\r\n        }\r\n        return Promise.all(certificates)\r\n    } catch (e) {\r\n        console.log({ e })\r\n    }\r\n}\r\n\r\n// Function to fetch certificate metadata from an IPFS URL\r\nexport const fetchCertificateMeta = async (ipfsUrl) => {\r\n    try {\r\n        if (!ipfsUrl) return null;\r\n        const meta = await axios.get(ipfsUrl)\r\n        return meta\r\n    } catch (e) {\r\n        console.log({ e })\r\n    }\r\n}\r\n\r\n// the function to fetch the owner and the owner certyificate contract\r\nexport const fetchCertificateOwner = async (minterContract, index) => {\r\n    try {\r\n        return await minterContract.methods.ownerOf(index).call();\r\n    } catch (e) {\r\n        console.log({ e })\r\n    }\r\n}\r\n\r\n// Function to fetch the owner of the certificate contract\r\nexport const fetchCertificateContractOwner = async (minterContract) => {\r\n    try {\r\n        let owner = await minterContract.methods.owner().call();\r\n        return owner;\r\n    } catch (e) {\r\n        console.log({ e })\r\n    }\r\n}","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nimport { Button, Modal, Form, FloatingLabel } from 'react-bootstrap'\r\nimport { uploadFileToWebStorage } from '../../../utils/minter';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\n\r\nconst AddCertificates = ({ save, address }) => {\r\n    const [name, setName] = useState(\"\")\r\n    const [ipfsImage, setIpfsImage] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n    const [attributes, setAttribute] = useState([])\r\n    const [show, setShow] = useState(false)\r\n\r\n    // Check if all the fields are filled\r\n    const isFormFilled = () => name && ipfsImage && description && attributes\r\n\r\n    // Close pop up modal\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        setAttribute([])\r\n    };\r\n\r\n    \r\n    // Pop up modal\r\n    const handleShow = () => setShow(true)\r\n\r\n\r\n    \r\n    // Add an attribute to a certificate\r\n    const setAttributeFunc = (e, trait_type) => {\r\n        const { value } = e.target;\r\n        const attributeObject = {\r\n            trait_type,\r\n            value\r\n        }\r\n        const arr = attributes;\r\n\r\n        // check if the attribute already exists\r\n        const index = arr.findIndex((el) => el.trait_type === trait_type)\r\n\r\n        if (index >= 0) {\r\n            // Update the existing attribute\r\n            arr[index] = {\r\n                trait_type,\r\n                value,\r\n            };\r\n            setAttribute(arr)\r\n            return;\r\n        }\r\n        // add a new attribute\r\n        setAttribute((oldArray) => [...oldArray, attributeObject])\r\n    };\r\n  return (\r\n    <>\r\n      \r\n      <Button onClick={handleShow} variant='dark' className='rounded-pill px-0' style={{ width: \"38px\"}}>\r\n            <i className='bi bi-plus'></i>\r\n      </Button>\r\n\r\n      {/* modal */}\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>Mint Certificate</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n            <Form>\r\n                <FloatingLabel controlId='inputLocation' label=\"Name\" className='MB-5' >\r\n                    <Form.Control type='text' placeholder='Name of the Certificate' onChange={(e) => {\r\n                        setName(e.target.value)\r\n                    }}\r\n                    />\r\n                </FloatingLabel>\r\n                <FloatingLabel controlId='inputDescription' label='Description' className='mb-3' >\r\n                    <Form.Control as=\"textarea\" placeholder='Description' style={{ height: \"80px\"}} onChange={(e) => {\r\n                        setDescription(e.target.value)\r\n                    }}\r\n                    />\r\n                </FloatingLabel>\r\n\r\n                <Form.Control type='file' className='mb-3' onChange={async (e) => {\r\n                    const imageURL = await uploadFileToWebStorage(e);\r\n                    if (!imageURL) {\r\n                        alert(\"Failed to upload Image\");\r\n                        return;\r\n                    }\r\n                    setIpfsImage(imageURL)\r\n                }} placeholder='Product Name'>\r\n                    \r\n                </Form.Control>\r\n\r\n                <Form.Label>\r\n                    <h5>Properties</h5>\r\n                </Form.Label>\r\n\r\n\r\n                <FloatingLabel controlId='inputissuedBy' label=\"Issued By E.g Google\" className='mb-5' >\r\n                    <Form.Control type='text' placeholder='Issued By E.G Google' onChange={async (e) => {\r\n                        setAttributeFunc(e, \"issuedBy\")\r\n                    }\r\n                    }\r\n                    />\r\n                </FloatingLabel>\r\n\r\n                <FloatingLabel controlId='inputdateissued' label=\"Date Issue\" className='mb-5' >\r\n                    <Form.Control type='text' placeholder='Issued Date' onChange={async (e) => {\r\n                        setAttributeFunc(e, \"dateIssued\")\r\n                    }}\r\n                    />\r\n                </FloatingLabel>\r\n\r\n                \r\n            </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n            <Button variant=\"outline-secondary\" onClick={handleClose}>CLose</Button>\r\n            <Button variant='dark' disabled={!isFormFilled()} onClick={() => {\r\n                save({\r\n                    name, ipfsImage, description, ownerAddress: address,\r\n                    attributes,\r\n                })\r\n                handleClose()\r\n            }}>Mint Certificate</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nAddCertificates.propTypes = {\r\n    save: PropTypes.func.isRequired,\r\n    address: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default AddCertificates;\r\n","import React from 'react'\r\nimport { Card, Col, Badge, Stack, Row } from 'react-bootstrap'\r\nimport PropTypes from 'prop-types'\r\nimport { truncateAddress } from '../../../utils'\r\nimport Identicon from '../../ui/Identicon'\r\n\r\nconst CertificatesCard = ({ certificate }) => {\r\n\r\n    const { image, description, owner, name, index, attributes } = certificate;\r\n\r\n  return (\r\n    <Col key={index}>\r\n        <Card className='h-100'>\r\n            <Card.Header>\r\n                <Stack direction='horizontal' gap={2}>\r\n                    <Identicon address={owner} size={28} />\r\n                    <span className='font-monospace text-secondary'>\r\n                        {truncateAddress(owner)}\r\n                    </span>\r\n                    <Badge className='ms-auto' bg=\"secondary\">\r\n                        {index} ID\r\n                    </Badge>\r\n                </Stack>\r\n            </Card.Header>\r\n            <div className='ratio ratio-4x3'>\r\n                <img src={image} alt={description} style={{ objectFit: \"cover\"}} />\r\n            </div>\r\n\r\n            <Card.Body className='d-flex flex-column text-center'>\r\n                <Card.Title>\r\n                    {name}\r\n                </Card.Title>\r\n                <Card.Text className='flex-grow-1'>\r\n                    {description}\r\n                </Card.Text>\r\n                <div>\r\n                    <Row className=\"mt-2\">\r\n                        {attributes.map((attribute, key) => (\r\n                            <Col key={key}>\r\n                                <div className='border rounded bg-light'>\r\n                                    <div className='text-secondary fw-lighter small text-capitalize'>\r\n                                        {attribute.trait_type}\r\n                                    </div>\r\n                                    <div className='text-seconday text-capitalize font-monospace'>\r\n                                        {attribute.value}\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        ))}\r\n                    </Row>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    </Col>\r\n  )\r\n}\r\n\r\nCertificatesCard.prototype = {\r\n    certificate: PropTypes.instanceOf(Object).isRequired,\r\n}\r\n\r\nexport default CertificatesCard;","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"d-flex justify-content-center\">\r\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </Spinner>\r\n  </div>\r\n);\r\nexport default Loader;\r\n","import { useContractKit } from '@celo-tools/use-contractkit';\r\nimport React, {useState, useEffect, useCallback} from 'react'\r\nimport { toast } from 'react-toastify';\r\nimport PropTypes from 'prop-types'\r\nimport AddCertificates from './Add';\r\nimport Certificate from './Card'\r\nimport Loader from '../../ui/Loader';\r\nimport { NotificationSuccess, NotificationError } from '../../ui/Notifications'\r\nimport { getCertificates, createCertificates, fetchCertificateContractOwner } from '../../../utils/minter'\r\nimport { Row } from 'react-bootstrap'; \r\n \r\nconst CertificatesList = ({ minterContract, name}) => {\r\n    const { performActions, address } = useContractKit();\r\n    const [certificates, setCertificates] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [certificateOwner, setcertificateOwner] = useState(null);\r\n\r\n    // we need callback function to fetche the Certificate from the minterContract \r\n\r\n    const getAssets  = useCallback(async () => {\r\n        try {\r\n            setLoading(true);\r\n            const allCertificates = await getCertificates(minterContract);\r\n            if (!allCertificates) return;\r\n            setCertificates(allCertificates)\r\n        } catch (error) {\r\n            console.log({ error })\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [minterContract])\r\n\r\n    // function to create the Certificate\r\n    const addCertificate = async (data) => {\r\n        try {\r\n            setLoading(true);\r\n            await createCertificates(minterContract, performActions, data);\r\n            toast(<NotificationSuccess text=\"Uploading Certificates List....\" />)\r\n            getAssets();\r\n        } catch (error) {\r\n            console.log({ error })\r\n            toast(<NotificationError text=\"Failed to create an Certificate.\" />)\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    // function to fetch the owner of the Certificate contract and use getAsset\r\n\r\n    const fetchContractOwner = useCallback(async (minterContract) => {\r\n        // get te person that deploy the Certificate\r\n        const _address = await fetchCertificateContractOwner(minterContract);\r\n        setcertificateOwner(_address);\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if (address && minterContract) {\r\n                getAssets();\r\n                fetchContractOwner(minterContract);\r\n            }\r\n        } catch (error) {\r\n            console.log({ error })\r\n        }\r\n    }, [minterContract, address, getAssets, fetchContractOwner])\r\n\r\n    if(address) {\r\n        return (\r\n            <>\r\n                {!loading ? (\r\n                    <>\r\n                        <div className='d-flex justify-content-between align-items-center mb-4'>\r\n                            <h1 className=' fs-4 fw-bold mb-0'>{name}</h1>\r\n                            {certificateOwner === address ? (\r\n                                <AddCertificates save={addCertificate} address={address} />\r\n                            ) : null}\r\n                        </div>\r\n                        <Row xs={1} sm={2} lg={3} className='g-3 mb-5 g-xl-4'>\r\n                                {certificates.map((_certificate) => (\r\n                                    <Certificate key={_certificate.index}\r\n                                    certificate={{\r\n                                        ..._certificate\r\n                                    }} />\r\n                                ))}\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    <Loader />\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n    return null;\r\n}\r\n\r\nCertificatesList.prototype = {\r\n    minterContract: PropTypes.instanceOf(Object),\r\n    updataBalance: PropTypes.func.isRequired,\r\n}\r\n\r\nCertificatesList.defaultProps = {\r\n    minterContract: null,\r\n  };\r\n  \r\nexport default CertificatesList;","import { useContract } from './useContract'\r\nimport MyCertificatesAbi from '../contracts/MyNFT.json'\r\nimport MyCertificatesContractAddress from '../contracts/MyNFT-address.json';\r\n\r\nexport const useMinterCertContract = () => useContract(MyCertificatesAbi.abi, MyCertificatesContractAddress.MyNFT)\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\n\r\nexport const useContract = (abi, contractAddress) => {\r\n  const { getConnectedKit, address } = useContractKit();\r\n  const [contract, setContract] = useState(null);\r\n\r\n  const getContract = useCallback(async () => {\r\n    const kit = await getConnectedKit();\r\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\r\n  }, [getConnectedKit, abi, contractAddress]);\r\n\r\n  useEffect(() => {\r\n    if (address) getContract();\r\n  }, [address, getContract]);\r\n\r\n  return contract;\r\n};\r\n","import React from \"react\";\r\nimport { Container, Nav } from \"react-bootstrap\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport { Notification } from \"./components/ui/Notifications\";\r\nimport Wallet from \"./components/Wallet\";\r\nimport Cover from \"./components//minter/Cover\";\r\nimport Certificates from './components/minter/nft';\r\nimport bg from './assets/nft_geo_cover.png'\r\nimport { useBalance, useMinterCertContract } from \"./hooks\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = function AppWrapper() {\r\n  const { address, destroy, connect } = useContractKit();\r\n  const { balance, getBalance } = useBalance();\r\n  const minterContract = useMinterCertContract();\r\n\r\n  return (\r\n    <>\r\n      <Notification />\r\n      {address ? (\r\n        <Container fluid=\"md\">\r\n          <Nav className=\"justify-content-end pt-3 pb-5\">\r\n            <Nav.Item>\r\n              {/*display user wallet*/}\r\n              <Wallet\r\n                address={address}\r\n                amount={balance.CELO}\r\n                symbol=\"CELO\"\r\n                destroy={destroy}\r\n              />\r\n            </Nav.Item>\r\n          </Nav>\r\n          {/* display cover */}\r\n          <main>\r\n            <Certificates \r\n              name=\"My Certificate Cloud\"\r\n              updateBalance={getBalance}\r\n              minterContract={minterContract}/>\r\n          </main>\r\n        </Container>\r\n      ) : (\r\n        // display cover if user is not connected\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <Cover name=\"My Certificate Cloud\" connect={connect} />\r\n          </header>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\n\r\nexport const useBalance = () => {\r\n\r\n  // Get the connected wallet address and Celo kit instance from useContractKit hook\r\n  const { address, kit } = useContractKit();\r\n  \r\n  // Initialize balance state with a default value of 0\r\n  const [balance, setBalance] = useState(0);\r\n\r\n  // Define the getBalance function using useCallback to memoize the function\r\n  const getBalance = useCallback(async () => {\r\n    // Fetch the total token balance of the connected wallet\r\n    const value = await kit.getTotalBalance(address);\r\n    setBalance(value);\r\n  }, [address, kit]);\r\n  \r\n  // Call the getBalance function whenever the address or getBalance function changes\r\n  useEffect(() => {\r\n    if (address) getBalance();\r\n  }, [address, getBalance]);\r\n\r\n  // Return an object with the current balance and the getBalance function\r\n  return {\r\n    balance,\r\n    getBalance,\r\n  };\r\n};\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  ContractKitProvider,\r\n  Alfajores,\r\n  NetworkNames,\r\n} from \"@celo-tools/use-contractkit\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ContractKitProvider\r\n      networks={[Alfajores]}\r\n      network={{\r\n        name: NetworkNames.Alfajores,\r\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\r\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\r\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\r\n        chainId: 44787,\r\n      }}\r\n      dapp={{\r\n        name: \"Celo React Boilerplate\",\r\n        description: \"A React Boilerplate for Celo Dapps\",\r\n      }}\r\n    >\r\n      <App />\r\n    </ContractKitProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}